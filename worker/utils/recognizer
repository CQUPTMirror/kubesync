#!/bin/python3
import os
import requests
from urllib.parse import urljoin


class File:
    name: str = ''
    ext: str = ''
    majorVersion: str = ''
    version: str = ''
    arch: str = ''
    edition: str = ''
    editionType: str = ''
    part: int = 0
    path: str = ''


def find(path: str = "/data", ext: list = None, include: str = '', exclude: str = "placeholder") -> list:
    if ext is None:
        ext = [".iso"]
    find_files = []
    for root, dirs, files in os.walk(path):
        files = [f for f in files if not f[0] == '.']
        dirs[:] = [d for d in dirs if not d[0] == '.']
        if (not include or include in root) and exclude not in root:
            find_files.extend(
                [(root, i) for i in files if os.path.splitext(i)[-1] in ext and include in i and exclude not in i])
    return find_files


def combine(s: tuple, e: str = ' '):
    r = ''
    for v in s:
        r += v + e if v else ''
    return r.removesuffix(e)


def recognizer(filename: str) -> File:
    f = File()
    ff = os.path.splitext(filename)
    name = ff[0]
    f.ext = ff[-1]
    if name.startswith("CentOS-"):
        name = name.removeprefix("CentOS-")
        stream = False
        if name.startswith("Stream-"):
            stream = True
            name = name.removeprefix("Stream-")
        name_list = name.split('-')
        major_version = int(name_list[0])
        if major_version <= 7:
            f.arch = name_list[1]
            f.editionType = name_list[2]
            f.version = '-'.join(name_list[3:])
        else:
            f.version = f'stream-{name_list[1]}' if stream else name_list[1]
            f.arch = name_list[2]
            f.editionType = name_list[3]
        f.majorVersion = str(major_version)
    elif name.startswith("debian-"):
        name = name.removeprefix("debian-")
        name_list = name.split('-')
        if not name_list[0][0].isdigit():
            f.editionType = name_list[0]
            name_list = name_list[1:]
        else:
            f.editionType = ''
        f.version = name_list[0]
        f.arch = name_list[1]
        f.edition = name_list[2]
        if len(name_list) == 4:
            f.part = int(name_list[3])
        else:
            f.part = 0
    elif name.startswith("ubuntu-"):
        name = name.removeprefix("ubuntu-")
        name_list = name.split('-')
        f.version = name_list[0]
        start = 1
        if name_list[start] == "beta":
            f.version = f'{f.version}-beta'
            start += 1
        if name_list[start] == "live":
            start += 1
        f.edition = name_list[start]
        f.arch = name_list[start + 1]
    elif name.startswith("Fedora-"):
        name = name.removeprefix("Fedora-")
        name_list = name.split('-')
        f.edition = name_list[0]
        f.editionType = name_list[1]
        f.arch = name_list[2]
        f.majorVersion = name_list[3]
        f.version = name_list[4]
    elif name.startswith("deepin-"):
        name = name.removeprefix("deepin-")
        name_list = name.split('-')
        f.edition = name_list[0]
        f.editionType = name_list[1]
        f.version = '-'.join(name_list[2:-1])
        f.arch = name_list[-1]
    elif name.startswith("kali-"):
        name = name.removeprefix("kali-linux-")
        name_list = name.split('-')
        f.version = name_list[0]
        if name_list[1].startswith('W'):
            f.version = f'{name_list[0]}-{name_list[1]}'
            name_list = name_list[1:]
        if len(name_list) == 3:
            f.editionType = name_list[1]
            f.arch = name_list[2]
        elif len(name_list) == 4:
            f.editionType = name_list[2]
            f.arch = name_list[3]
    elif name.startswith("openSUSE-"):
        if "Micro" not in name and name.endswith("-Current"):
            name = name.removeprefix("openSUSE-")
            name_list = name.split('-')
            f.majorVersion = name_list[0]
            if f.majorVersion == "Leap":
                f.version = name_list[1]
                f.editionType = name_list[2]
                start = 3
                if f.editionType == "Rescue":
                    start += 1
                elif f.editionType == "CR":
                    f.editionType = name_list[start]
                    start += 1
                elif f.editionType.isdigit():
                    f.version = f'{f.version}-{f.editionType}'
                    f.editionType = name_list[start]
                    start += 1
                if name_list[start] == "Live":
                    start += 1
                f.arch = name_list[start]
            elif f.majorVersion == "Tumbleweed":
                f.editionType = name_list[1]
                start = 2
                if f.editionType == "Rescue":
                    f.editionType = f'{name_list[1]}-{name_list[2]}'
                    start += 1
                if len(name_list) > start and name_list[start] == "Live":
                    start += 1
                if f.editionType.startswith("Yomi"):
                    f.arch = f.editionType.split('.')[1]
                    f.editionType = f.editionType.split('.')[0]
                else:
                    f.arch = name_list[start]
    elif name.startswith("archlinux-"):
        name = name.removeprefix("archlinux-")
        name_list = name.split('-')
        if len(name_list) != 1:
            f.version = name_list[0]
            f.arch = name_list[1]
    else:
        return f
    f.name = f'{combine((f.majorVersion, f.version))} ({combine((f.arch, f.edition, f.editionType, f"Part {f.part}" if f.part else ""), ", ")})'
    return f


if __name__ == "__main__":
    name = os.getenv("NAME")
    if not name:
        print("no name provide")
        exit(1)
    path = os.getenv("FIND_PATH", "/data")
    ext = os.getenv("FIND_EXT", ".iso").split(';')
    include = os.getenv("FIND_INCLUDE", "")
    exclude = os.getenv("FIND_EXCLUDE", "placeholder")
    api = os.getenv("API", "http://manager-sample:3000")
    payloads = []
    files = find(path, ext, include, exclude)
    for i in files:
        try:
            f = recognizer(i[1])
        except:
            continue
        if f and f.name and f.name != " ()" and (f.majorVersion or f.version):
            f.path = os.path.join(i[0].removeprefix(path), i[1])
            payloads.append(f.__dict__)
    try:
        req = requests.post(urljoin(api, f"/file/{name}"), json={"files": payloads})
        req.raise_for_status()
        print("update file list succeed")
    except:
        print("failed to update file list: request error")
